# -*- coding: utf-8 -*-
"""LTSM for stock market.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/16dWyeCDesVum0eVhhA9pb64ln0ltkpNi
"""

!pip install --upgrade yfinance

import numpy as np
import pandas as pd
import yfinance as yf
import matplotlib.pyplot as plt
import tensorflow as tf
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import LSTM, Dense, Dropout
from sklearn.preprocessing import MinMaxScaler
from sklearn.model_selection import train_test_split

from datetime import datetime

# Define stock ticker
ticker = "TSLA"

# Download historical stock data dynamically from the first trading date
df = yf.download(ticker, start=None, end=datetime.now().strftime('%Y-%m-%d'), interval="1d")

# Keep only the 'Close' price column
df = df[['Close']]
df.dropna(inplace=True)

# Display the last few rows
print(df.tail())
print(df.size)

# Normalize data using MinMaxScaler
scaler = MinMaxScaler(feature_range=(0,1))
df_scaled = scaler.fit_transform(df)

# Convert the scaled data back into a dataframe
df_scaled = pd.DataFrame(df_scaled, columns=['Close'])

def create_sequences(data, time_step=60):
    X, y = [], []
    for i in range(len(data) - time_step):
        X.append(data[i:i + time_step])
        y.append(data[i + time_step])
    return np.array(X), np.array(y)

# Define time step (lookback period)
time_step = 60  # Using the last 60 days to predict the next day

# Create sequences
X, y = create_sequences(df_scaled.values, time_step)

# Split into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, shuffle=False)

# Reshape data to fit LSTM input format (samples, time steps, features)
X_train = X_train.reshape((X_train.shape[0], X_train.shape[1], 1))
X_test = X_test.reshape((X_test.shape[0], X_test.shape[1], 1))

# Define LSTM model
# Mean Absolute Percentage Error: 5.34% for AAPL
model = Sequential([
    LSTM(units=50, return_sequences=True, input_shape=(X_train.shape[1], 1)),
    Dropout(0.2),
    LSTM(units=50, return_sequences=True),
    Dropout(0.2),
    LSTM(units=50),
    Dropout(0.2),
    Dense(units=1)  # Single output for stock price prediction
])

# Compile the model
model.compile(optimizer='adam', loss='mean_squared_error')

# Model summary
model.summary()


# # LSTM model Kaggle
# # Mean Absolute Percentage Error: 8.09% for AAPL
# model = Sequential()
# model.add(LSTM(128, return_sequences=True, input_shape= (X_train.shape[1], 1)))
# # model.add(Dropout(0.2)) ## test
# model.add(LSTM(64, return_sequences=False))
# model.add(Dense(25))
# model.add(Dense(1))

# # Compile the model
# model.compile(optimizer='adam', loss='mean_squared_error')

# # Model summary
# model.summary()

# Train the LSTM model
history = model.fit(X_train, y_train, epochs=20, batch_size=32, validation_data=(X_test, y_test))

# model.fit(X_train, y_train, batch_size=1, epochs=1)

# Predict on test data
predicted_prices = model.predict(X_test)

# Convert predictions back to original scale
predicted_prices = scaler.inverse_transform(predicted_prices)

# Convert actual prices back to original scale
y_test_original = scaler.inverse_transform(y_test.reshape(-1, 1))

plt.figure(figsize=(12,6))
plt.plot(y_test_original, color='blue', label='Actual Stock Price')
plt.plot(predicted_prices, color='red', linestyle='dashed', label='Predicted Stock Price')
plt.xlabel('Time')
plt.ylabel('Stock Price')
plt.title(f'Stock Price Prediction using LSTM for {ticker}')
plt.legend()
plt.show()

# Get the last 60 days of stock price data
last_60_days = df_scaled[-time_step:].values

# Reshape for LSTM model input
last_60_days = last_60_days.reshape((1, time_step, 1))

# Predict next day's price
predicted_next_day = model.predict(last_60_days)

# Convert back to original scale
predicted_next_day_price = scaler.inverse_transform(predicted_next_day)

print(f"Predicted Next Day Price: {predicted_next_day_price[0][0]:.2f}")

# Number of future days to predict
future_days = 30

# Get the last 60 days of stock prices from the dataset
last_60_days = df_scaled[-time_step:].values  # Convert DataFrame to NumPy array
last_60_days = last_60_days.reshape(1, time_step, 1)  # Now reshape it properly


# Initialize future input with the last 60 days
future_input = last_60_days.copy()

# List to store future predictions
future_predictions = []

# Generate predictions iteratively
for _ in range(future_days):
    # Predict the next day's price
    predicted_price = model.predict(future_input)

    # Store the predicted price
    future_predictions.append(predicted_price[0][0])  # Extract scalar value

    # Append predicted price to the input and reshape correctly
    predicted_price_reshaped = np.array(predicted_price).reshape(1, 1, 1)

    # Update future_input by removing the first value and appending the new one
    future_input = np.append(future_input[:, 1:, :], predicted_price_reshaped, axis=1)

# Convert future predictions back to original scale
future_predictions = scaler.inverse_transform(np.array(future_predictions).reshape(-1, 1))

# Print predicted values
print("Predicted Stock Prices for the Next 30 Days:")
print(future_predictions.flatten())

from sklearn.metrics import mean_absolute_percentage_error

mape = mean_absolute_percentage_error(y_test_original, predicted_prices)
print(f"Mean Absolute Percentage Error: {mape:.2%} for {ticker}")